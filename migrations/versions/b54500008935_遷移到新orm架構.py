"""遷移到新ORM架構

Revision ID: b54500008935
Revises:
Create Date: 2025-04-08 06:11:33.135553

"""

from typing import Sequence, Union

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "b54500008935"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_index('ix_breedrecordorm_batch_name', table_name='breedrecordorm')
    # op.drop_table('breedrecordorm')
    # op.drop_index('ix_salerecordorm_location', table_name='salerecordorm')
    # op.drop_table('salerecordorm')
    # op.drop_table('n8n_chat_histories')
    # op.drop_index('ix_feedrecordorm_batch_name', table_name='feedrecordorm')
    # op.drop_table('feedrecordorm')
    op.alter_column(
        "salerecordorm", "location", new_column_name="batch_name", nullable=False
    )
    op.alter_column("salerecordorm", "closed", new_column_name="is_completed")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "salerecordorm", "batch_name", new_column_name="location", nullable=False
    )
    op.alter_column("salerecordorm", "is_completed", new_column_name="closed")
    # ### end Alembic commands ###

    # op.create_table(
    #     "feedrecordorm",
    #     sa.Column("unique_id", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("md5", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column(
    #         "event",
    #         postgresql.ENUM("ADDED", "DELETED", "UPDATED", name="recordevent"),
    #         autoincrement=False,
    #         nullable=True,
    #     ),
    #     sa.Column(
    #         "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
    #     ),
    #     sa.Column("batch_name", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("feed_date", sa.DATE(), autoincrement=False, nullable=False),
    #     sa.Column(
    #         "feed_manufacturer", sa.VARCHAR(), autoincrement=False, nullable=False
    #     ),
    #     sa.Column("feed_item", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("sub_location", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("is_completed", sa.BOOLEAN(), autoincrement=False, nullable=False),
    #     sa.Column("feed_week", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("feed_additive", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("feed_remark", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.PrimaryKeyConstraint("unique_id", name="feedrecordorm_pkey"),
    # )
    # op.create_index(
    #     "ix_feedrecordorm_batch_name", "feedrecordorm", ["batch_name"], unique=False
    # )
    # op.create_table(
    #     "n8n_chat_histories",
    #     sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
    #     sa.Column(
    #         "session_id", sa.VARCHAR(length=255), autoincrement=False, nullable=False
    #     ),
    #     sa.Column(
    #         "message",
    #         postgresql.JSONB(astext_type=sa.Text()),
    #         autoincrement=False,
    #         nullable=False,
    #     ),
    #     sa.PrimaryKeyConstraint("id", name="n8n_chat_histories_pkey"),
    # )
    # op.create_table(
    #     "salerecordorm",
    #     sa.Column("unique_id", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("md5", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column(
    #         "event",
    #         postgresql.ENUM("ADDED", "DELETED", "UPDATED", name="recordevent"),
    #         autoincrement=False,
    #         nullable=True,
    #     ),
    #     sa.Column(
    #         "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
    #     ),
    #     sa.Column("closed", sa.BOOLEAN(), autoincrement=False, nullable=False),
    #     sa.Column("handler", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("sale_date", sa.DATE(), autoincrement=False, nullable=False),
    #     sa.Column("location", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("customer", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("male_count", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("female_count", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column(
    #         "total_weight",
    #         sa.DOUBLE_PRECISION(precision=53),
    #         autoincrement=False,
    #         nullable=True,
    #     ),
    #     sa.Column(
    #         "total_price",
    #         sa.DOUBLE_PRECISION(precision=53),
    #         autoincrement=False,
    #         nullable=True,
    #     ),
    #     sa.Column(
    #         "male_price",
    #         sa.DOUBLE_PRECISION(precision=53),
    #         autoincrement=False,
    #         nullable=True,
    #     ),
    #     sa.Column(
    #         "female_price",
    #         sa.DOUBLE_PRECISION(precision=53),
    #         autoincrement=False,
    #         nullable=True,
    #     ),
    #     sa.Column("unpaid", sa.BOOLEAN(), autoincrement=False, nullable=False),
    #     sa.PrimaryKeyConstraint("unique_id", name="salerecordorm_pkey"),
    # )
    # op.create_index(
    #     "ix_salerecordorm_location", "salerecordorm", ["location"], unique=False
    # )
    # op.create_table(
    #     "breedrecordorm",
    #     sa.Column("unique_id", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("md5", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column(
    #         "event",
    #         postgresql.ENUM("ADDED", "DELETED", "UPDATED", name="recordevent"),
    #         autoincrement=False,
    #         nullable=True,
    #     ),
    #     sa.Column(
    #         "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
    #     ),
    #     sa.Column("farm_name", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("address", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("farm_license", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("farmer_name", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("farmer_address", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("batch_name", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("veterinarian", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("chicken_breed", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("breed_male", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("breed_female", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("breed_date", sa.DATE(), autoincrement=False, nullable=False),
    #     sa.Column("supplier", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("sub_location", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("is_completed", sa.BOOLEAN(), autoincrement=False, nullable=False),
    #     sa.PrimaryKeyConstraint("unique_id", name="breedrecordorm_pkey"),
    # )
    # op.create_index(
    #     "ix_breedrecordorm_batch_name", "breedrecordorm", ["batch_name"], unique=False
    # )
    # ### end Alembic commands ###
