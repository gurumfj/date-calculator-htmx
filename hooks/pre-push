#!/bin/bash

# pre-push hook
# 執行更全面的檢查，確保只有高質量的代碼被推送到遠端

# 獲取當前目錄
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# 切換到專案根目錄
cd "$PROJECT_ROOT" || exit 1

# 顏色定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 檢查推送的分支
while read local_ref local_sha remote_ref remote_sha
do
  if [[ "$remote_ref" == *"/main" ]] || [[ "$remote_ref" == *"/master" ]]; then
    echo -e "${YELLOW}正在推送到主分支 (${remote_ref}), 執行全面檢查...${NC}"
    
    # 檢查是否有 WIP 提交 (首次推送腳本時暫時禁用此檢查)
    # 後續提交時取消註釋以啟用此檢查
    # if git log $local_sha --not $remote_sha --grep="WIP" --grep="工作進行中" --grep="待完成" --grep="未完成"; then
    #   echo -e "${RED}❌ 發現 WIP 提交! 請在推送到主分支前完成或移除這些提交.${NC}"
    #   exit 1
    # fi
    
    # 執行全面檢查
    echo -e "${YELLOW}執行全面檢查 (typecheck, build)...${NC}"
    # 暫時跳過 lint 檢查，只執行 typecheck 和 build
    bun run typecheck && bun run build
    
    if [ $? -ne 0 ]; then
      echo -e "${RED}❌ 全面檢查失敗! 請修復問題後再推送.${NC}"
      exit 1
    fi
  else
    # 對於其他分支，執行基本檢查
    echo -e "${YELLOW}推送到 ${remote_ref}, 執行基本檢查...${NC}"
    
    # 執行快速類型檢查和構建檢查
    bun run typecheck
    
    if [ $? -ne 0 ]; then
      echo -e "${RED}❌ TypeScript 類型檢查失敗!${NC}"
      echo -e "${YELLOW}若要強制推送，請使用 git push --no-verify${NC}"
      exit 1
    fi
    
    # 嘗試構建
    echo -e "${YELLOW}正在檢查構建是否成功...${NC}"
    bun run build
    
    if [ $? -ne 0 ]; then
      echo -e "${RED}❌ 構建失敗! 請修復構建錯誤後再推送.${NC}"
      exit 1
    fi
  fi
done

echo -e "${GREEN}✅ 所有檢查通過! 推送繼續進行.${NC}"
exit 0
